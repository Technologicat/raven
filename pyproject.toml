[project]
name = "raven-visualizer"
description = "Semantic visualizer and analyzer"
authors = [
    { name = "Juha Jeronen and JAMK University of Applied Sciences", email = "juha.jeronen@jamk.fi" },
]
requires-python = "<3.13,>=3.10"  # TODO: add support for Python 3.13 in unpythonic and mcpyrate (its dependency)

readme = "README.md"

license = { text = "BSD" }

# Tell whichever build backend is in use (pdm in our case) to run its own mechanism
# to find the version of the project and plug it into the metadata.
# Details for how we instruct pdm to find the version are in `[tool.pdm.version]` below.
dynamic = ["version"]

dependencies = [
    "bibtexparser>=2.0.0b8",
    "dearpygui>=2.0.0",
    "mcpyrate>=3.6.4",  # for unpythonic, though we only use the colorizer utility for now
    "mistletoe>=1.4.0",  # for vendored dpg-markdown
    "numpy>=1.26.4,<2.0",
    "openTSNE>=1.0.2",
    "pip==24.3.1",  # for spaCy language model auto-install  # TODO: version?
    "psutil>=5.9.0",  # for vendored file_dialog
    "scikit-learn>=1.5.1",
    "scipy>=1.14.0",
    "sentence_transformers>=3.4.1",
    "spacy>=3.7.5",
    "sseclient-py>=1.8.0",
    "torch>=2.4.0",
    "unpythonic>=0.15.3",
    "wordcloud>=1.9.3",
    "wosfile>=0.6",
    "chromadb>=1.0.8",
    "bm25s>=0.2.12",
    "watchdog>=6.0.0"
    "chromadb>=1.0.8",  # RAG semantic search
    "bm25s>=0.2.12",  # RAG keyword search
    "watchdog>=6.0.0",  # RAG document directory monitoring
]

keywords=["visualization", "semantic-analysis", "application", "AI", "NLP", "GUI"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Utilities"
]

# For CUDA, we need some `nvidia-*` pip packages from NVIDIA:
#   https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#pip-wheels
# with the appropriate cuda version; see the output of your `nvidia-smi`.
# This is currently configured for CUDA 12.x.
#
# The NVIDIA packages will be installed into `.venv/lib/python3.10/site-packages/nvidia*`.
[project.optional-dependencies]
cuda = [
    "cupy-cuda12x>=13.2.0",
    "nvidia-cuda-nvcc-cu12",
    "nvidia-cuda-nvrtc-cu12",
    "nvidia-cuda-runtime-cu12",
    "nvidia-cublas-cu12",
    "nvidia-cudnn-cu12",
    "nvidia-cufft-cu12",
    "nvidia-curand-cu12",
    "nvidia-cusolver-cu12",
    "nvidia-cusparse-cu12",
    "tensorrt>=8.5.2.2",  # for NVIDIA acceleration; should pull in the relevant package
]

[project.urls]
Repository = "https://github.com/Technologicat/raven"

[project.scripts]
raven-arxiv2id = "raven.arxiv2id:main"
raven-check-cuda = "raven.check_cuda:main"
raven-llmclient = "raven.llmclient:main"
raven-pdf2bib = "raven.pdf2bib:main"
raven-preprocess = "raven.preprocess:main"
raven-wos2bib = "raven.wos2bib:main"
raven-visualizer = "raven.app:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.version]
# The `file` source tells pdm to look for a line in a file that matches the regex `__version__ = ".*"`.
# The regex parse is fairly robust, it can handle arbitrary whitespace and comments.
source = "file"
path = "raven/__init__.py"

[tool.pdm.build]
includes = ["raven"]
excludes = ["**/test", "**/__pycache__"]

[[tool.pdm.source]]
name = "nvidia"
url = "https://pypi.org/simple"
verify_ssl = true

[tool.mypy]
show_error_codes = true
